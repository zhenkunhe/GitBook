{"./":{"url":"./","title":"Introduction","keywords":"","body":"READ ME © 2017 Trashman all right reserved，powered by Gitbook修訂時間： 2017-08-12 03:45:00 "},"md/1-Namespace/1-簡介/":{"url":"md/1-Namespace/1-簡介/","title":"簡介","keywords":"","body":"簡介 tagsstart Namespace tagsstop 什麼是Namespace？ 命名空間就是在大箱子(Kerne)裏面再裝一堆小箱子(Kernel Namespace) 為什麼要這麼做？ 因為如果我們想在箱子裏面放兩個外觀一模一樣的蘋果(Process)，到時候一定會無法區分 不如就放在A箱子裡面的蘋果，叫作A蘋果；放在B箱子裡面的蘋果，叫作B蘋果 命名空間有幾種？ Linux 2.6.24版的Kernel開始,提供了6種不同類型的Namespace 分別是： 程序間通信(IPC)命名空間 程序命名空間 網絡命名空間 掛載命名空間 UTS命名空間 用戶命名空間 所以有人說Namespaces是一種資源隔離方案，使得PID、Network、IPC等系統資源，不再屬於全域設定，而是某個特定的Namespace的資源 還有其他好處嘛？ 通過Namespace技術使得用戶創建的程序能夠與系統分離得更加徹底，從而不需要使用更多的底層(硬體支援)虛擬化技術 因為Namespaces是用純軟體劃分出來的概念 Namespace之間有關聯嘛？ Namespace之間的資源互相隔離、不可見的 因此在作業系統的層面上看，就會出現多個相同pid的Process User要怎麼看待Namespace 在用戶層面上只能看到屬於用戶自己Namespace下的資源 例如使用ps命令只能列出自己Namespace下的程序 使用者角度來看,每個Namespace看上去就像一個單獨的Linux系統 Image 1 - Linux的命名空間技術架構 © 2017 Trashman all right reserved，powered by Gitbook修訂時間： 2017-09-04 02:07:58 "},"md/1-Namespace/2-Network namespaces/1-什麼是Network Namespace.html":{"url":"md/1-Namespace/2-Network namespaces/1-什麼是Network Namespace.html","title":"什麼是Network Namespace","keywords":"","body":"什麼是Network Namespace tagsstart Namespace Network namespace tagsstop 什麼是Network namespace 虛擬化網路相關的功能 Linux近幾年特有的技術(Darwin/Windows無類似功能)(約Kernel 3.0開始才有) 是輕量級虛擬化技術的基礎（Docker,LXC,OpenVZ的原理） 多用在虛擬化和隔離 很少被單獨使用 虛擬化網路相關的功能,是指哪些？ 不同Network namespace內的Process,具有不同的Network資源如下： 虛擬網卡列表 IPv4和IPv6協議 Routing Table 防火牆設定 /proc/net目錄 /sys/class/net目錄 埠（socket） 有什麼特性？ 簡單說就是幾個Process之間搞小團體，小團體有私有網路資源，且小團體之間互不干擾 多用在虛擬化和隔離 如果Network Namespace之間要互相溝通怎麼辦? 在不同的Network namespace間創建通道：veth pair（虛擬網路設備對接口） 不同Network Namespace因為veth pair得以共享同一個實體網路設備 傳統沒有Network natags: Namespace,Network namespacemespace前是怎樣？ 一般乙太網路應用程式 Image 1 - 一般乙太網路應用程式 如果是ADSL/光世代的PPPoE Image 2 - PPPoE 如果是VPN Image 3 - VPN 網卡拿來當Hub用的Bridge Image 4 - Bridge Bridge相關指令: 需要安裝bridge-utils才能使用brctl brctl show - 顯示bridge狀況 brctl addbr/delbr - 新增/刪除bridge brctl addif - 將interface新增至bridge brctl delif - 將interface從bridge移除 有Network namespace後是怎樣？ 只有一個Network namespace的話 Image 5 - 一個Network namespace 複數Network namespace的話 Image 6 - 複數Network namespace 透過veth可以連接兩個Network namespace Image 7 - veth 搭配Bridge使其他Network namespace上網 Image 8 - Bridge+Network namespace 有什麼應用場景？ 多個Network namespace可以共享eth0和lo等實體網路設備 多個Apache伺服器Process可以在不同Network namespace的80埠上進行監聽 一個Process不能嗅探其他Network namespace的流量 一個Process不能關閉其他Network namespace的接口 © 2017 Trashman all right reserved，powered by Gitbook修訂時間： 2017-09-04 02:07:58 "},"md/1-Namespace/2-Network namespaces/2-範例.html":{"url":"md/1-Namespace/2-Network namespaces/2-範例.html","title":"範例","keywords":"","body":"範例 tagsstart Namespace Network namespace tagsstop 此範例的目標是？ 使用ip創建H1和H2兩個Network namespace H1擁有自己的Network namespace以及私有網路網路接口h1-eth0 H2擁有自己的Network namespace以及私有網路網路接口h2-eth0 使用ovs-vsctl創建Software Switch S1 S1有兩個埠s1-eth0和s1-eth1 S1運行在root namespace,並使用實體接口eth0，等待Controller的指令 使用veth pair與對應的Host接口相連，這樣H1和H2就可以透過S1溝通 s1-eth0和s1-eth1間的通訊資料透過Software Switch轉發 Image 1 - Example1 什麼是ip command? ip這個command是iproute2軟體包裡面的一個強大的網路配置工具 它能夠替代一些傳統的網路管理工具，例如:ifconfig、route 使用權限要為root 幾乎所有的Linux發行版本都支持該command 介紹ip command吧 ip netns add - 新增NetNS ip netns list - 列出現有的NetNS ip netns identify - 顯示PID所在的NetNS ip netns identify $$ - 顯示目前的NetNS ip netns exec - 在Network namespace執行command ip link add type veth peer name - 建立一個veth裝置 ip link set nets - 將veth搬到NetNS Step 1 - Create host namespaces 建立H1 namespaces sudo ip netns add h1 建立H2 namespaces sudo ip netns add h2 察看建立結果 sudo ip netns Image 2 - Step 1-Result Image 3 - Step 1-Topo Step 2 - Create switch 建立Switch sudo ovs-vsctl add-br s1 Image 4 - Step 2-Topo Step 3 - Create links 建立Link 1(h1-eth0 - s1-eth1) sudo ip link add h1-eth0 type veth peer name s1-eth1 建立Link 2(h2-eth0 - s1-eth2) sudo ip link add h2-eth0 type veth peer name s1-eth2 顯示連結結果 sudo ip link show Image 5 - Step 3-Result Step 4 - Move host ports into namespaces 將H1 port移到H1 namespaces sudo ip link set h1-eth0 netns h1 將H2 port接到H2 namespaces sudo ip link set h2-eth0 netns h2 顯示H1 namespaces的連結 sudo ip netns exec h1 ip link show 顯示H2 namespaces的連結 sudo ip netns exec h2 ip link show Image 6 - Step 4-Result Image 7 - Step 4-Topo Step 5 - Connect switch ports to OVS 將S1 port1連接到Switch sudo ovs-vsctl add-port s1 s1-eth1 將S1 port2連接到Switch sudo ovs-vsctl add-port s1 s1-eth2 顯示Switch的連結 sudo ovs-vsctl show Image 8 - Step 5-Topo Step 6 - Set up OpenFlow controller 設定Controller sudo ovs-vsctl set-controller s1 tcp:127.0.0.1 設定Controller監聽端口OpenFlow TCP（默認值:6633) sudo ovs-controller ptcp: 查詢OpenFlow Controller是否正確連接到S1 sudo ovs-vsctl show Image 9 - Step 6-Result Step 7 - Configure network 修改H1 port網路介面，給予H1 eth0一個 10.0.0.1 的參數 sudo ip netns exec h1 ifconfig h1-eth0 10.1 啟動H1 eth0網路介面 sudo ip netns exec h1 ifconfig lo up 修改H2 port網路介面，給予H2 eth0一個 10.0.0.2 的參數 sudo ip netns exec h2 ifconfig h2-eth0 10.2 啟動H2 eth0網路介面 sudo ip netns exec h2 ifconfig lo up 啟動Switch網路介面 sudo ifconfig s1-eth1 up sudo ifconfig s1-eth2 up Step 8 - Test network 透過H1網路介面Ping H2網路介面 sudo ip netns exec h1 ping -c1 10.2 Image 10 - Step 8-Result Image 11 - Final-Result © 2017 Trashman all right reserved，powered by Gitbook修訂時間： 2017-09-04 02:07:58 "},"tags.html":{"url":"tags.html","title":"Tags","keywords":"","body":"Tags © 2017 Trashman all right reserved，powered by Gitbook修訂時間： 2017-08-12 03:45:00 Namespace 簡介 什麼是Network Namespace 範例 Network namespace 什麼是Network Namespace 範例 "}}