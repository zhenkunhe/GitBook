{"./":{"url":"./","title":"About","keywords":"","body":"READ ME © 2017 Trashman all right reserved，powered by Gitbook修訂時間： 2017-04-13 20:46:34 "},"tags.html":{"url":"tags.html","title":"tags","keywords":"","body":"Tags © 2017 Trashman all right reserved，powered by Gitbook修訂時間： 2017-04-13 20:46:34 "},"md/CMake/Project.html":{"url":"md/CMake/Project.html","title":"Project","keywords":"","body":"Project © 2017 Trashman all right reserved，powered by Gitbook修訂時間： 2017-06-01 19:43:31 "},"md/CMake/Target.html":{"url":"md/CMake/Target.html","title":"Target","keywords":"","body":"Target Target properties INTERFACE_INCLUDE_DIRECTORIES 若此Target為Library，則此Property代表public include directories的List Target B若link到此Target A，則Target B會自動includeTarget A中， INTERFACE_INCLUDE_DIRECTORIES所指向的directories，因此不必再特別設定include_directories 可以透過set_target_properties設定 set_target_properties(${TargetName} PROPERTIES INTERFACE_INCLUDE_DIRECTORIES ${PROJECT_SOURCE_DIR}/inc ) 若target_include_directories()指令中，值被設定為PUBLIC或是INTERFACE，則target_include_directories()內的設定值會自動加入INTERFACE_INCLUDE_DIRECTORIES target_include_directories 分析 Directory ├── CMakeLists.txt ├── foo │ ├── CMakeLists.txt │ ├── src │ │ └── foo.c │ └── inc │ └── foo.h └── bar ├── CMakeLists.txt └── src └── bar.c Root CMakeLists.txtcmake_minimum_required(VERSION 2.8) add_subdirectory(foo) add_subdirectory(bar) Foo foo/CMakeLists.txtfoo/src/foo.cfoo/inc/foo.hcmake_minimum_required(VERSION 2.8) project(Foo) add_library(foo SHARED src/foo.c) target_include_directories(foo PUBLIC ${PROJECT_SOURCE_DIR}/inc ) # target_include_directories(foo PRIVATE # ${PROJECT_SOURCE_DIR}/inc # ) # set_target_properties(foo # PROPERTIES # INTERFACE_INCLUDE_DIRECTORIES ${PROJECT_SOURCE_DIR}/inc # )#include \"foo/foo.h\" #include void foo(void) { \tprintf(\"This is foo version %s\\n\", \"1.0\"); }#pragma once #ifndef FOOBAR_FOO_H #define FOOBAR_FOO_H void foo(void); #endif Bar bar/CMakeLists.txtbar/src/bar.ccmake_minimum_required(VERSION 2.8) project(Bar) add_executable(bar src/bar.c) target_link_libraries(bar foo )#include \"foo/foo.h\" int main(int argc, char* argv[]) { \tfoo(); \treturn 0; } Result Image 2.2.1 - cmake && make Image 2.2.2 - run © 2017 Trashman all right reserved，powered by Gitbook修訂時間： 2017-06-01 20:51:47 "},"md/CMake/Build.html":{"url":"md/CMake/Build.html","title":"Build","keywords":"","body":"Build © 2017 Trashman all right reserved，powered by Gitbook修訂時間： 2017-06-01 19:43:31 "},"md/CMake/Install.html":{"url":"md/CMake/Install.html","title":"Install","keywords":"","body":"Install © 2017 Trashman all right reserved，powered by Gitbook修訂時間： 2017-06-01 19:43:31 "}}